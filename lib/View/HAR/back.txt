public function update(Request $request, $id)
    {
        
        $oldData = $this->myUtil($id);
        // $myCurrentDateTime = Carbon::now()->format('Y-m-d H:i:s');
        // if (
        //     !auth()->user()->can('sell.update') && !auth()->user()->can('direct_sell.access') &&
        //     !auth()->user()->can('so.update') && !auth()->user()->can('edit_pos_payment')
        // ) {
        //     abort(403, 'Unauthorized action.');
        // }

        try {
            $input = $request->except('_token');

            //status is send as quotation from edit sales screen.
            $input['is_quotation'] = 0;
            if ($input['status'] == 'quotation') {
                $input['status'] = 'draft';
                $input['is_quotation'] = 1;
                $input['sub_status'] = 'quotation';
            } elseif ($input['status'] == 'proforma') {
                $input['status'] = 'draft';
                $input['sub_status'] = 'proforma';
                $input['is_quotation'] = 0;
            } else {
                $input['sub_status'] = null;
                $input['is_quotation'] = 0;
            }

            $is_direct_sale = false;
            if (!empty($input['products'])) {
                //Get transaction value before updating.
                $transaction_before = Transaction::find($id);
                $status_before = $transaction_before->status;
                $rp_earned_before = $transaction_before->rp_earned;
                $rp_redeemed_before = $transaction_before->rp_redeemed;

                if ($transaction_before->is_direct_sale == 1) {
                    $is_direct_sale = true;
                }

                $sales_order_ids = $transaction_before->sales_order_ids ?? [];

                //Add change return
                $change_return = $this->dummyPaymentLine;
                if (!empty($input['payment']['change_return'])) {
                    $change_return = $input['payment']['change_return'];
                    unset($input['payment']['change_return']);
                }

                //Check Customer credit limit
                $is_credit_limit_exeeded = $transaction_before->type == 'sell' ? $this->transactionUtil->isCustomerCreditLimitExeeded($input, $id) : false;

                if ($is_credit_limit_exeeded !== false) {
                    $credit_limit_amount = $this->transactionUtil->num_f($is_credit_limit_exeeded, true);
                    $output = [
                        'success' => 0,
                        'msg' => __('lang_v1.cutomer_credit_limit_exeeded', ['credit_limit' => $credit_limit_amount]),
                    ];
                    if (!$is_direct_sale) {
                        return $output;
                    } else {
                        return redirect()
                            ->action([\App\Http\Controllers\SellController::class, 'index'])
                            ->with('status', $output);
                    }
                }

                //Check if there is a open register, if no then redirect to Create Register screen.
                if (!$is_direct_sale && $this->cashRegisterUtil->countOpenedRegister() == 0) {
                    return redirect()->action([\App\Http\Controllers\CashRegisterController::class, 'create']);
                }

                // $business_id = $request->session()->get('user.business_id');
                // $user_id = $request->session()->get('user.id');
                // $commsn_agnt_setting = $request->session()->get('business.sales_cmsn_agnt');
                $business_id = 1;
                $user_id = 1;
                $commsn_agnt_setting = null;

                $discount = [
                    'discount_type' => $input['discount_type'],
                    'discount_amount' => $input['discount_amount'],
                ];
                $invoice_total = $this->productUtil->calculateInvoiceTotal($input['products'], $input['tax_rate_id'], $discount);

                if (!empty($request->input('transaction_date'))) {
                    $input['transaction_date'] = $this->productUtil->uf_date_api($request->input('transaction_date'), true);
                }

                $input['commission_agent'] = !empty($request->input('commission_agent')) ? $request->input('commission_agent') : null;
                if ($commsn_agnt_setting == 'logged_in_user') {
                    $input['commission_agent'] = $user_id;
                }

                if (isset($input['exchange_rate']) && $this->transactionUtil->num_uf($input['exchange_rate']) == 0) {
                    $input['exchange_rate'] = 1;
                }

                

                //Customer group details
                $contact_id = $request->get('contact_id', null);
                $cg = $this->contactUtil->getCustomerGroup($business_id, $contact_id);
                $input['customer_group_id'] = (empty($cg) || empty($cg->id)) ? null : $cg->id;

                //set selling price group id
                $price_group_id = $request->has('price_group') ? $request->input('price_group') : null;

                $input['is_suspend'] = isset($input['is_suspend']) && 1 == $input['is_suspend'] ? 1 : 0;
                if ($input['is_suspend']) {
                    $input['sale_note'] = !empty($input['additional_notes']) ? $input['additional_notes'] : null;
                }

                if ($status_before == 'draft' && !empty($request->input('invoice_scheme_id'))) {
                    $input['invoice_scheme_id'] = $request->input('invoice_scheme_id');
                }

                //Types of service
                if ($this->moduleUtil->isModuleEnabled('types_of_service')) {
                    $input['types_of_service_id'] = $request->input('types_of_service_id');
                    $price_group_id = !empty($request->input('types_of_service_price_group')) ? $request->input('types_of_service_price_group') : $price_group_id;
                    $input['packing_charge'] = !empty($request->input('packing_charge')) ?
                        $this->transactionUtil->num_uf($request->input('packing_charge')) : 0;
                    $input['packing_charge_type'] = $request->input('packing_charge_type');
                    $input['service_custom_field_1'] = !empty($request->input('service_custom_field_1')) ?
                        $request->input('service_custom_field_1') : null;
                    $input['service_custom_field_2'] = !empty($request->input('service_custom_field_2')) ?
                        $request->input('service_custom_field_2') : null;
                    $input['service_custom_field_3'] = !empty($request->input('service_custom_field_3')) ?
                        $request->input('service_custom_field_3') : null;
                    $input['service_custom_field_4'] = !empty($request->input('service_custom_field_4')) ?
                        $request->input('service_custom_field_4') : null;
                    $input['service_custom_field_5'] = !empty($request->input('service_custom_field_5')) ?
                        $request->input('service_custom_field_5') : null;
                    $input['service_custom_field_6'] = !empty($request->input('service_custom_field_6')) ?
                        $request->input('service_custom_field_6') : null;
                    $input['custom_field_4'] = !empty($request->input('custom_field_4')) ?
                        $request->input('custom_field_4') : null;
                }

                $input['selling_price_group_id'] = $price_group_id;

                if ($this->transactionUtil->isModuleEnabled('tables')) {
                    $input['res_table_id'] = request()->get('res_table_id');
                }
                if ($this->transactionUtil->isModuleEnabled('service_staff')) {
                    $input['res_waiter_id'] = request()->get('res_waiter_id');
                }

                if ($this->transactionUtil->isModuleEnabled('kitchen')) {
                    $input['is_kitchen_order'] = request()->get('is_kitchen_order');
                }

                //upload document
                $document_name = $this->transactionUtil->uploadFile($request, 'sell_document', 'documents');
                if (!empty($document_name)) {
                    $input['document'] = $document_name;
                }

                if ($request->input('additional_expense_value_1') != '') {
                    $input['additional_expense_key_1'] = $request->input('additional_expense_key_1');
                    $input['additional_expense_value_1'] = $request->input('additional_expense_value_1');
                }

                if ($request->input('additional_expense_value_2') != '') {
                    $input['additional_expense_key_2'] = $request->input('additional_expense_key_2');
                    $input['additional_expense_value_2'] = $request->input('additional_expense_value_2');
                }

                if ($request->input('additional_expense_value_3') != '') {
                    $input['additional_expense_key_3'] = $request->input('additional_expense_key_3');
                    $input['additional_expense_value_3'] = $request->input('additional_expense_value_3');
                }

                if ($request->input('additional_expense_value_4') != '') {
                    $input['additional_expense_key_4'] = $request->input('additional_expense_key_4');
                    $input['additional_expense_value_4'] = $request->input('additional_expense_value_4');
                }

                // $only_payment = !$is_direct_sale && !auth()->user()->can('sell.update') && auth()->user()->can('edit_pos_payment');
                $only_payment = !$is_direct_sale;

                //if edit pos not allowed and only edit payment allowed
                // if ($only_payment) {
                //     DB::beginTransaction();
                //     $this->onlyUpdatePayment($transaction_before, $input);
                //     DB::commit();

                //     $can_print_invoice = auth()->user()->can('print_invoice');
                //     $invoice_layout_id = $request->input('invoice_layout_id');

                //     // $receipt = $this->receiptContent($business_id, $input['location_id'], $transaction_before->id, null, false, true, $invoice_layout_id);
                //     $msg = trans('purchase.payment_updated_success');

                //     $output = ['success' => 1, 'msg' => $msg];
                //     // $output = ['success' => 1, 'msg' => $msg, 'receipt' => $receipt];

                //     return $output;
                // }


                //Begin transaction
                DB::beginTransaction();

                $transaction = $this->transactionUtil->updateSellTransaction($id, $business_id, $input, $invoice_total, $user_id);

                //update service staff timer
                if (!$is_direct_sale && $transaction->status == 'final') {
                    foreach ($input['products'] as $product_line) {
                        if (!empty($product_line['res_service_staff_id'])) {
                            $product = Product::find($product_line['product_id']);

                            if (!empty($product->preparation_time_in_minutes)) {
                                //if quantity not increase skip line
                                $quantity = $this->transactionUtil->num_uf($product_line['quantity']);
                                if (!empty($product_line['transaction_sell_lines_id'])) {
                                    $sl = TransactionSellLine::find($product_line['transaction_sell_lines_id']);

                                    if ($sl->quantity >= $quantity && $sl->res_service_staff_id == $product_line['res_service_staff_id']) {
                                        continue;
                                    }

                                    //if same service staff assigned quantity is only increased quantity
                                    if ($sl->res_service_staff_id == $product_line['res_service_staff_id']) {
                                        $quantity = $quantity - $sl->quantity;
                                    }
                                }

                                $service_staff = User::find($product_line['res_service_staff_id']);

                                $base_time = \Carbon::parse($transaction->transaction_date);
                                //is transaction date is past take base time as now
                                if ($base_time->lt(\Carbon::now())) {
                                    $base_time = \Carbon::now();
                                }

                                //if already assigned set base time as available_at
                                if (!empty($service_staff->available_at) && \Carbon::parse($service_staff->available_at)->gt(\Carbon::now())) {
                                    $base_time = \Carbon::parse($service_staff->available_at);
                                }

                                $total_minutes = $product->preparation_time_in_minutes * $quantity;

                                $service_staff->available_at = $base_time->addMinutes($total_minutes);
                                $service_staff->save();
                            }
                        }
                    }
                }

                //Update Sell lines
                $deleted_lines = $this->transactionUtil->createOrUpdateSellLines($transaction, $input['products'], $input['location_id'], true, $status_before);

                //Update update lines
                $is_credit_sale = isset($input['is_credit_sale']) && $input['is_credit_sale'] == 1 ? true : false;

                $new_sales_order_ids = $transaction->sales_order_ids ?? [];
                $sales_order_ids = array_unique(array_merge($sales_order_ids, $new_sales_order_ids));

                if (!empty($sales_order_ids)) {
                    $this->transactionUtil->updateSalesOrderStatus($sales_order_ids);
                }

                if (!$transaction->is_suspend && !$is_credit_sale) {
                    //Add change return
                    $change_return['amount'] = $input['change_return'] ?? 0;
                    $change_return['is_return'] = 1;
                    if (!empty($input['change_return_id'])) {
                        $change_return['payment_id'] = $input['change_return_id'];
                    }
                    $input['payment'][] = $change_return;

                    if (!$is_direct_sale || auth()->user()->can('sell.payments')) {
                        $this->transactionUtil->createOrUpdatePaymentLines($transaction, $input['payment']);

                        //Update cash register
                        if (!$is_direct_sale) {
                            $this->cashRegisterUtil->updateSellPayments($status_before, $transaction, $input['payment']);
                        }
                    }
                }

                // if ($request->session()->get('business.enable_rp') == 1) {
                //     $this->transactionUtil->updateCustomerRewardPoints($contact_id, $transaction->rp_earned, $rp_earned_before, $transaction->rp_redeemed, $rp_redeemed_before);
                // }

                Media::uploadMedia($business_id, $transaction, $request, 'shipping_documents', false, 'shipping_document');

                if ($transaction->type == 'sell') {

                    //Update payment status
                    $payment_status = $this->transactionUtil->updatePaymentStatus($transaction->id, $transaction->final_total);
                    $transaction->payment_status = $payment_status;

                    //Update product stock
                    $this->productUtil->adjustProductStockForInvoice($status_before, $transaction, $input);

                    //Allocate the quantity from purchase and add mapping of
                    //purchase & sell lines in
                    //transaction_sell_lines_purchase_lines table
                    $business_details = $this->businessUtil->getDetails($business_id);
                    $pos_settings = empty($business_details->pos_settings) ? $this->businessUtil->defaultPosSettings() : json_decode($business_details->pos_settings, true);

                    $business = [
                        'id' => $business_id,
                        'accounting_method' => "fifo",
                        // 'accounting_method' => $request->session()->get('business.accounting_method'),
                        'location_id' => $input['location_id'],
                        'pos_settings' => $pos_settings,
                    ];
                    $this->transactionUtil->adjustMappingPurchaseSell($status_before, $transaction, $business, $deleted_lines);

                    //Auto send notification
                    $whatsapp_link = $this->notificationUtil->autoSendNotification($business_id, 'new_sale', $transaction, $transaction->contact);
                }

                $log_properties = [];
                if (isset($input['repair_completed_on'])) {
                    $completed_on = !empty($input['repair_completed_on']) ? $this->transactionUtil->uf_date_api($input['repair_completed_on'], true) : null;
                    if ($transaction->repair_completed_on != $completed_on) {
                        $log_properties['completed_on_from'] = $transaction->repair_completed_on;
                        $log_properties['completed_on_to'] = $completed_on;
                    }
                }

                $this->moduleUtil->getModuleData('after_sale_saved', ['transaction' => $transaction, 'input' => $input]);

                Media::uploadMedia($business_id, $transaction, $request, 'documents');

                $this->transactionUtil->activityLog($transaction, 'edited', $transaction_before);

                SellCreatedOrModified::dispatch($transaction);

                DB::commit();

                if ($request->input('is_save_and_print') == 1) {
                    $url = $this->transactionUtil->getInvoiceUrl($id, $business_id);

                    return redirect()->to($url . '?print_on_load=true');
                }

                $msg = __('lang_v1.updated_success');
                $receipt = '';
                $can_print_invoice = true;
                // $can_print_invoice = auth()->user()->can('print_invoice');
                $invoice_layout_id = $request->input('invoice_layout_id');

                if ($input['status'] == 'draft' && $input['is_quotation'] == 0) {
                    $msg = trans('sale.draft_added');
                } elseif ($input['status'] == 'draft' && $input['is_quotation'] == 1) {
                    $msg = trans('lang_v1.quotation_updated');
                    if (!$is_direct_sale && $can_print_invoice) {
                        // $receipt = $this->receiptContent($business_id, $input['location_id'], $transaction->id, null, false, true, $invoice_layout_id);
                    } else {
                        $receipt = '';
                    }
                } elseif ($input['status'] == 'final') {
                    $msg = trans('sale.pos_sale_updated');
                    if (!$is_direct_sale && $can_print_invoice) {
                        // $receipt = $this->receiptContent($business_id, $input['location_id'], $transaction->id, null, false, true, $invoice_layout_id);
                    } else {
                        $receipt = '';
                    }
                }

                // Calculate the difference between quantities
                $itemtable = [];
                $itemNew = [];
                $itemDifference = [];
                $itemRemoved = [];
                $itemDifferenceNote = [];
                $newData = $this->myUtil($id);
                if ($transaction->is_suspend) {
                    // Retrieve item details after the update





                    foreach ($oldData['item_details'] as $oldItem) {
                        $found = false;
                        foreach ($newData['item_details'] as $newItem) {
                            if ($oldItem['product_id'] == $newItem['product_id']) {
                                $difference = $oldItem['quantity'] - $newItem['quantity'];
                                if ($difference > 0) {
                                    $itemDifference[] = [
                                        'product_id' => $newItem['product_id'],
                                        'brand_id' => $newItem['brand_id'],
                                        'brand' => $newItem['brand'],
                                        'product_name' => $oldItem['product_name'],
                                        'department' => $oldItem['department'],
                                        'quantity' => $difference,
                                        'note' => $newItem['note'],
                                    ];
                                } else if ($difference < 0) {
                                    $itemNew[] = [
                                        'product_id' => $newItem['product_id'],
                                        'brand_id' => $newItem['brand_id'],
                                        'brand' => $newItem['brand'],
                                        'product_name' => $oldItem['product_name'],
                                        'department' => $oldItem['department'],
                                        'quantity' => abs($difference),
                                        'note' => $newItem['note'],
                                    ];
                                } else if ($oldItem['note'] !== $newItem['note']) {
                                    // If quantities are the same but notes are different, add the item to the difference array
                                    $itemDifferenceNote[] = [
                                        'product_id' => $newItem['product_id'],
                                        'brand_id' => $newItem['brand_id'],
                                        'brand' => $newItem['brand'],
                                        'product_name' => $oldItem['product_name'],
                                        'department' => $oldItem['department'],
                                        'quantity' => $oldItem['quantity'],
                                        'note' => $newItem['note'],
                                    ];
                                }
                                $found = true;
                                break;
                            }
                        }
                        if (!$found) {
                            // If the old item is not found in the new data, add it to the difference array
                            $itemRemoved[] = [
                                'product_id' => $oldItem['product_id'],
                                'brand_id' => $oldItem['brand_id'],
                                'brand' => $oldItem['brand'],
                                'product_name' => $oldItem['product_name'],
                                'department' => $oldItem['department'],
                                'quantity' => $oldItem['quantity'],
                                'note' => $oldItem['note'],
                            ];
                        }
                    }


                    // Check for items in newData that don't exist in oldData
                    foreach ($newData['item_details'] as $newItem) {
                        //table change start
                        $itemtable[] = [
                            'product_id' => $newItem['product_id'],
                            'brand_id' => $newItem['brand_id'],
                            'brand' => $newItem['brand'],
                            'product_name' => $newItem['product_name'],
                            'department' => $newItem['department'],
                            'quantity' => $newItem['quantity'],
                            'note' => $newItem['note'],
                        ];
                        //table change ends
                        $found = false;
                        foreach ($oldData['item_details'] as $oldItem) {
                            if ($newItem['product_id'] === $oldItem['product_id']) {
                                $found = true;
                                break;
                            }
                        }
                        if (!$found) {
                            // $addedItems[] = $newItem;
                            $itemNew[] = [
                                'product_id' => $newItem['product_id'],
                                'brand_id' => $newItem['brand_id'],
                                'brand' => $newItem['brand'],
                                'product_name' => $newItem['product_name'],
                                'department' => $newItem['department'],
                                'quantity' => $newItem['quantity'],
                                'note' => $newItem['note'],
                            ];
                        }
                    }
                }

                $differprinter = [];
                $noteprinter = [];
                $removedPrinter = [];
                $tablePrinter = [];
                $printer = [];

                if ($newData['table_name'] != $oldData['table_name']) {
                    $msg = "Table Changed " . $oldData['table_name'];
                    $tablePrinter = PrinterController::printKitchen($transaction->id, $msg, $itemtable);
                }

                if (!empty($itemRemoved)) {
                    $removedPrinter = PrinterController::printKitchen($transaction->id, "ITEM Removed", $itemRemoved);
                }

                if (!empty($itemDifference)) {
                    $differprinter = PrinterController::printKitchen($transaction->id, "ITEM LESS", $itemDifference);
                }

                if (!empty($itemDifferenceNote)) {
                    $noteprinter = PrinterController::printKitchen($transaction->id, "Instructions", $itemDifferenceNote);
                }

                if (!empty($itemNew)) {
                    $printer = PrinterController::printKitchen($transaction->id, "ITEM Added", $itemNew);
                }

                $output = ['success' => 1, 'msg' => $msg, 'receipt' => $receipt, 'abdullah' => $transaction->id, 'printer' => $printer, 'ItemAdd' => $itemNew, 'oldData' => $oldData, 'itemLess' => $itemDifference, 'itemLessPrinter' => $differprinter, "itemRemoved" => $itemRemoved, 'removedPrinter' => $removedPrinter, 'transaction' => $transaction, "service_type" => $transaction ? $transaction->types_of_service ? $transaction->types_of_service->name : "" : "", "waiter" => $transaction ? $transaction->service_staff ? $transaction->service_staff->first_name : "" : "", "sales_person" => $transaction ? $transaction->sales_person : "", "table_name" => $transaction->table->name ?? "", 'newData' => $newData, 'tablePrinter' => $tablePrinter];
                // if ($transaction->is_suspend) {
                //     $printer = PrinterController::printKitchen($transaction->id, $myCurrentDateTime,"New Items",[]);
                //     // $this->printerController->printKitchen($transaction->id);
                // } else {
                //     $output = ['success' => 1, 'msg' => $msg, 'receipt' => $receipt, 'abdullah' => $transaction->id, 'print' => [], 'oldData' => $oldData, 'differ' => $itemDifference,'differprinter'=>$differprinter];
                // }

                if (!empty($whatsapp_link)) {
                    $output['whatsapp_link'] = $whatsapp_link;
                }
            } else {
                $output = [
                    'success' => 0,
                    'msg' => "first",
                ];
            }
        } catch (\Exception $e) {
            DB::rollBack();
            \Log::emergency('File:' . $e->getFile() . 'Line:' . $e->getLine() . 'Message:' . $e->getMessage());
            $output = [
                'success' => 0,
                'msg' => 'File:' . $e->getFile() . 'Line:' . $e->getLine() . 'Message:' . $e->getMessage(),
            ];
        }

        if (!$is_direct_sale) {
            return $output;
        } else {
            if ($input['status'] == 'draft') {
                if (isset($input['is_quotation']) && $input['is_quotation'] == 1) {
                    return redirect()
                        ->action([\App\Http\Controllers\SellController::class, 'getQuotations'])
                        ->with('status', $output);
                } else {
                    return redirect()
                        ->action([\App\Http\Controllers\SellController::class, 'getDrafts'])
                        ->with('status', $output);
                }
            } else {
                if (!empty($transaction->sub_type) && $transaction->sub_type == 'repair') {
                    return redirect()
                        ->action([\Modules\Repair\Http\Controllers\RepairController::class, 'index'])
                        ->with('status', $output);
                }

                if ($transaction->type == 'sales_order') {
                    return redirect()
                        ->action([\App\Http\Controllers\SalesOrderController::class, 'index'])
                        ->with('status', $output);
                }

                return redirect()
                    ->action([\App\Http\Controllers\SellController::class, 'index'])
                    ->with('status', $output);
            }
        }
    }